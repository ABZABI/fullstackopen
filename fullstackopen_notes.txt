==========
PART ONE
==========
A. INTRODUCTION TO REACT
========================
https://fullstackopen.com/en/part1/introduction_to_react

B. JAVASCRIPT
==============
Node.js is a JavaScript runtime environment based on Google's    Chrome V8 JavaScript engine and works practically anywhere - from servers to mobile phones.

Arrays
-------
 -  The contents of the array can be modified even though it is defined as a const. 
 -  Because the array is an object, the variable always points to the same object. However, the content of the array changes as new items are added to it.

- One way of iterating through the items of the array is using 'forEach' as seen in the example. forEach receives a function defined using the arrow syntax as a parameter.
ex. const t = [1, -1, 3]
    t.forEach(value => {
        console.log(value)  // numbers 1, -1, 3, 5 are printed, each on its own line
    })      

-   When using React, techniques from functional programming are often used. One characteristic of the functional programming paradigm is the use of immutable data structures.

- In React code, it is preferable to use the method 'concat' to 'push()', which creates a new array with the added item. This ensures the original array remains unchanged.
ex. const t = [1, -1, 3]

    const t2 = t.concat(5)  // creates new array

    console.log(t)  // [1, -1, 3] is printed
    console.log(t2) // [1, -1, 3, 5] is printed

- The method call t.concat(5) does not add a new item to the old array but returns a new array which, besides containing the items of the old array, also contains the new item.

-   Individual items of an array are easy to assign to variables with the help of the destructuring assignment.
ex. const t = [1, 2, 3, 4, 5]

    const [first, second, ...rest] = t

    console.log(first, second)  // 1, 2 is printed
    console.log(rest)          // [3, 4, 5] is printed

Objects
--------
-   The values of the properties can be of any type, like integers, strings, arrays, objects...

-   The properties of an object are referenced by using the "dot" notation, or by using brackets

-   You can also add properties to an object on the fly by either using dot notation or brackets

Functions
---------
-   There are two ways to reference the function; 
    * one is giving a name in a function declaration.
    ex. function product(a, b) {
            return a * b
        }

        const result = product(2, 6)
        // result is now 12

    * The other way to define the function is by using a function expression. In this case, there is no need to give the function a name and the definition may reside among the rest of the code
    ex. const average = function(a, b) {
            return (a + b) / 2
        }

        const result = average(2, 5)
        // result is now 3.5

Object methods and "this"
--------------------------
-   We can assign methods to an object by defining properties that are functions
ex. const arto = {
        name: 'Arto Hellas',
        age: 35,
        education: 'PhD',
        greet: function() {
            console.log('hello, my name is ' + this.name)
        },
    }

-   Methods can be assigned to objects even after the creation of the object
ex. const arto = {
        name: 'Arto Hellas',
        age: 35,
        education: 'PhD',
        greet: function() {
            console.log('hello, my name is ' + this.name)
        },
    }

    arto.growOlder = function() {
        this.age += 1
    }

-   When calling the method through a reference, the method loses knowledge of what the original "this" was    
ex. arto.greet()    // "hello, my name is Arto Hellas" gets printed

    const referenceToGreet = arto.greet
    referenceToGreet() // prints "hello, my name is undefined"

-   Contrary to other languages, in JavaScript the value of "this" is defined based on how the method is called. When calling the method through a reference, the value of "this" becomes the so-called global object and the end result is often not what the software developer had originally intended.

-   One situation leading to the "disappearance" of "this" arises when we set a timeout to call the greet function on the arto object, using the setTimeout function.
Code snippet:   
    const arto = {
        name: 'Arto Hellas',
        greet: function() {
            console.log('hello, my name is ' + this.name)
        },
    }

    setTimeout(arto.greet, 1000)

-As mentioned, the value of "this" in JavaScript is defined based on how the method is being called. When setTimeout is calling the method, it is the JavaScript engine that actually calls the method and, at that point, this refers to the global object.

-   There are several mechanisms by which the original this can be preserved. One of these is using a method called "bind" when using the "setTimeout" method
ex.  setTimeout(arto.greet.bind(arto), 1000)

-   Calling arto.greet.bind(arto) creates a new function where this is bound to point to Arto, independent of where and how the method is being called.

-Using arrow functions it is possible to solve some of the problems related to this. They should not, however, be used as methods for objects because then this does not work at all.

Classes
--------
-   In the following example we define a "class" called Person and two Person objects
Sample Class Syntax:
    class Person {
        constructor(name, age) {
            this.name = name
            this.age = age
        }
        greet() {
            console.log('hello, my name is ' + this.name)
        }
    }

    const adam = new Person('Adam Ondra', 29)
    adam.greet()

    const janja = new Person('Janja Garnbret', 23)
    janja.greet()

Some JS in depth resources
---------------------------
1. https://developer.mozilla.org/en-US/docs/Web/JavaScript
2. https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed
3. https://javascript.info/
4. https://www.youtube.com/playlist?list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP //Namaste 🙏 JavaScript


C. COMPONENT STATE, EVENT HANDLERS
===================================
Component helper functions
----------------------------
-   If we examine the code below closely, we'll notice that the helper function is defined inside of another function that defines the behavior of our component
ex. const Hello = (props) => {
        const bornYear = () => {
            const yearNow = new Date().getFullYear()
            return yearNow - props.age
        }

        return (
            <div>
            <p>
                Hello {props.name}, you are {props.age} years old
            </p>
            <p>So you were probably born in {bornYear()}</p>
            </div>
        )
    }
    
-   In JavaScript, defining functions within functions is a commonly-used technique.

Destructuring
--------------
- Since props is an object we can streamline our component by assigning the values of the properties directly into variables which we can then use in our code.
ex. const Hello = (props) => {
        const name = props.name
        const age = props.age

        const bornYear = () => new Date().getFullYear() - age

        return (
            <div>
            <p>Hello {name}, you are {age} years old</p>
            <p>So you were probably born in {bornYear()}</p>
            </div>
        )
    }

-   Destructuring makes the assignment of variables even easier since we can use it to extract and gather the values of an object's properties into separate variables
ex. const Hello = (props) => {
        const { name, age } = props
        const bornYear = () => new Date().getFullYear() - age

        return (
            <div>
            <p>Hello {name}, you are {age} years old</p>
            <p>So you were probably born in {bornYear()}</p>
            </div>
        )
    }

-   We can take destructuring a step further
ex. const Hello = ({ name, age }) => {
        const bornYear = () => new Date().getFullYear() - age

        return (
            <div>
            <p>Hello {name}, you are {age} years old</p>
            <p>So you were probably born in {bornYear()}</p>
            </div>
        )
    }  

Page re-rendering
------------------
- Making repeated calls to the render method is not the recommended way to re-render components. 
ex. let counter = 1

    const refresh = () => {
    ReactDOM.createRoot(document.getElementById('root')).render(
        <App counter={counter} />
    )
    }

    refresh()
    counter += 1
    refresh()
    counter += 1
    refresh()

- Though we can implement slightly more interesting functionality by re-rendering and incrementing the counter every second by using setInterval
ex. setInterval(() => {
        refresh()
        counter += 1
    }, 1000)

Stateful Component
-------------------
-   States are added to an App component with the help of React's state hook.

-   First 'import { useState } from "react"', the module is imported

-   The function body that defines the component begins with the function call
ex. const [ counter, setCounter ] = useState(0) //example

-   The function call adds state to the component and renders it initialized with the value of zero. The function returns an array that contains two items. We assign the items to the variables counter and setCounter by using the destructuring assignment syntax shown earlier.

-   The counter variable is assigned the initial value of state which is zero. The variable setCounter is assigned a function that will be used to modify the state.

-   If the component doesn't render when you think it should, or if it renders at the "wrong time", you can debug the application by logging the values of the component's variables to the console.
ex. const App = () => {
        const [ counter, setCounter ] = useState(0)

        setTimeout(
            () => setCounter(counter + 1),
            1000
        )


        console.log('rendering...', counter)

        return (
            <div>{counter}</div>
        )
    }

Event Handling
---------------
-   In React, registering an event handler function to the click event happens like this
ex. 
    const App = () => {
        const [ counter, setCounter ] = useState(0)

        //function can be directly done in button element
        const handleClick = () => {
            console.log('clicked')
        }

        return (
            <div>
            <div>{counter}</div>

            <button onClick={handleClick}>
                plus
            </button>
            /*
                <button onClick={() => {setCounter(counter + 1)}}>
                    plus
                </button>
            */
            </div>
        )
    }

-   An event handler is a function   

-   Usually defining event handlers within JSX-templates is not a good idea. 

Passing state - to child components
------------------------------------
-   It's recommended to write React components that are small and reusable across the application and even across projects.

-   One best practice in React is to lift the state up in the component hierarchy. The documentation says:
    "Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor."

-   In React, it’s conventional to use onSomething names for props which represent events and handleSomething for the function definitions which handle those events.

** Changes in state cause rerendering

Refactoring the components
---------------------------
-   Be careful to not oversimplify your components, as this makes adding complexity a more tedious task down the road.


C. A MORE COMPLEX STATE, DEBUGGING REACT APPS
==============================================
Complex state
--------------
-   It is forbidden in React to mutate state directly, since it can result in unexpected side effects

-   Changing state has to always be done by setting the state to a new object. 

-   If properties from the previous state object are not changed, they need to simply be copied, which is done by copying those properties into a new object and setting that as the new state.

Handling Arrays
----------------
-    Adding the new item to the array is accomplished with the "concat" method, which does not mutate the existing array but rather returns a new copy of the array with the item added to it
ex.
    const [allClicks, setAll] = useState([])
    const handleLeftClick = () => {
        setAll(allClicks.concat('L'))
        setLeft(left + 1)
    }

-   It's not advisable to use the push method since the state of React components like allClicks must not be mutated directly

- After adding all the items to the array the join method can be used to join all the items
ex.
    <p>{allClicks.join(' ')}</p>

Update of the state is asynchronous
------------------------------------
-   State update in React happens asynchronously, i.e.changes are not immediately but "at some point" before the component is rendered again.
- To handle this you can create variable and assign the new value you want to assign and then pass value to the setState function
ex.
    const handleLeftClick = () => {
    setAll(allClicks.concat('L'))
    const updatedLeft = left + 1
    setLeft(updatedLeft)
    setTotal(updatedLeft + right) 
  }

Conditional rendering
----------------------
-   Rendering completely different React elements depending on the state of the application. This is called "conditional rendering".
-   Can be achieved by using conditional statements
ex.
    const History = (props) => {
        if (props.allClicks.length === 0) {
            return (
            <div>
                the app is used by pressing the buttons
            </div>
            )
        }
        return (
            <div>
            button press history: {props.allClicks.join(' ')}
            </div>
        )
    }

Old React
----------
-   In this course, we use the state hook to add state to our React components, which is part of the newer versions of React and is available from version 16.8.0 onwards. 

-   Before the addition of hooks, there was no way to add state to functional components. Components that required state had to be defined as class components, using the JavaScript class syntax.

-   In this course, we have made the slightly radical decision to use hooks exclusively from day one, to ensure that we are learning the current and future variations of React. 

-   Even though functional components are the future of React, it is still important to learn the class syntax, as there are billions of lines of legacy React code that you might end up maintaining someday. The same applies to documentation and examples of React that you may stumble across on the internet.

-   We will learn more about React class components later on in the course. 

Debugging React applications
-----------------------------
- One of the most important rules of web development
    * Keep the browser's developer console open at all times.

-   When you use console.log for debugging, don't combine objects in a Java-like fashion by using the plus operator
i.e.    console.log('props value is ' + props)

-   Instead, separate the things you want to log to the console with a comma:
i.e.    console.log('props value is', props)

-   Logging output to the console is by no means the only way of debugging our applications. You can pause the execution of your application code in the Browser developer console's debugger, by writing the command "debugger" anywhere in your code.

Rules of Hooks
---------------
-   The useState function (as well as the useEffect function introduced later on in the course) must not be called from inside of a loop, a conditional expression, or any place that is not a function defining a component

Event Handling Revisited
-------------------------
-   In order to make the button react to a click event, we have to add an event handler to it.

-   Event handlers must always be a function or a reference to a function. The button will not work if the event handler is set to a variable of any other type.

-   Event handlers are defined as a function call which means that the event handler is assigned the returned value from the function.

Useful Reading
---------------
-   You may find the following links useful
    * https://react.dev/learn //Official React Documentation 

Web programmers oath
=====================
Programming is hard, that is why I will use all the possible means to make it easier
-   I will have my browser developer console open all the time
-   I progress with small steps
-   I will write lots of console.log statements to make sure I understand how the code behaves and to help pinpointing problems
-   If my code does not work, I will not write more code. Instead - I start deleting the code until it works or just return to a state when everything was still working
-   When I ask for help in the course Discord or Telegram channel or elsewhere I formulate my questions properly (https://fullstackopen.com/en/part0/general_info#how-to-get-help-in-discord-telegram)

==========
PART TWO
==========
A. RENDERING A COLLECTION, MODULES
====================================
Rendering Collections
----------------------
-   Collections are mostly rendered using the map function with elements placed in an array

Key Attribute
--------------
-   The elements generated by the map method, must each have a unique key value: an attribute called key.
-   React uses the key attributes of objects in an array to determine how to update the view generated by a component when the component is re-rendered.

Map
---
-   Map always creates a new array, the elements of which have been created from the elements of the original array by mapping: using the function given as a parameter to the map method

Reduce
-------
-   Reduce is the multi tool of list transformation.
-   syntax
    let variable = array.reduce((startingVariable, arrayParameter)=>{
        return {...} 
    }, startingValue)

Anti-pattern: Array Indexes as Keys
------------------------------------
-   We could have made the error message on our console disappear by using the array indexes as keys. The indexes can be retrieved by passing a second parameter to the callback function of the map method
-   This is, however, not recommended and can create undesired problems even if it seems to be working just fine.

Forms
------
-   The event parameter is the event that triggers the call to the event handler function.
-   "event.preventDefault()" method, which prevents the default action of submitting a form. The default action would, among other things, cause the page to reload.

Controlled Component
---------------------
-   How do we access the data contained in the form's input element?
-   The first method we will take a look at is through the use of so-called controlled components.

Filtering Displayed Elements
-----------------------------